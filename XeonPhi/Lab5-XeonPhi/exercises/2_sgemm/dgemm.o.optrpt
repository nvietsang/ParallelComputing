Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] dgemm.cc(25,33)
  -> INLINE: (57,5) create_reference(int, int, double *, double *, double *)


    Report from: OpenMP optimizations [openmp]

dgemm.cc(45:1-45:1):OMP:main:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dgemm.cc(16,5) inlined into dgemm.cc(57,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at dgemm.cc(46,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.cc(50,8)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at dgemm.cc(50,8)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.cc(50,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

dgemm.cc(25,33):remark #34051: REGISTER ALLOCATION : [main] dgemm.cc:25

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     236
            Global    :      60
            Local     :     176
        Regenerable   :     112
        Spilled       :       7
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       8 [1.80e+00 ~ 0.1%]
            Writes    :      10 [8.00e+00 ~ 0.6%]
        Spills        :      96 bytes*
            Reads     :      17 [3.29e+01 ~ 2.5%]
            Writes    :      17 [1.24e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculate_dgemm(int, int, double *, double *, double *, double &, double &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculate_dgemm(int, int, double *, double *, double *, double &, double &)) [2] dgemm.cc(10,56)


    Report from: Code generation optimizations [cg]

dgemm.cc(10,56):remark #34051: REGISTER ALLOCATION : [_Z15calculate_dgemmiiPdS_S_RdS0_] dgemm.cc:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: create_reference(int, int, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (create_reference(int, int, double *, double *, double *)) [3] dgemm.cc(15,53)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at dgemm.cc(16,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

dgemm.cc(15,53):remark #34051: REGISTER ALLOCATION : [_Z16create_referenceiiPdS_S_] dgemm.cc:15

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      34
            Global    :      17
            Local     :      17
        Regenerable   :       7
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :       9 [2.04e+01 ~ 11.4%]
            Writes    :       9 [8.10e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
