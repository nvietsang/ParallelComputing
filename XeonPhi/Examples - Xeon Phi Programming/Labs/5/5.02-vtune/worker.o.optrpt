Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: RelativeNormOfDifference(int, const double *, const double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RelativeNormOfDifference(int, const double *, const double *)) [1] worker.cc(16,82)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.cc(22,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at worker.cc(22,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

worker.cc(16,82):remark #34051: REGISTER ALLOCATION : [_Z24RelativeNormOfDifferenceiPKdS0_] worker.cc:16

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi zmm0-zmm11]
        
    Routine temporaries
        Total         :      50
            Global    :      18
            Local     :      32
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: IterativeSolver(int, const double *, const double *, double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (IterativeSolver(int, const double *, const double *, double *, double)) [2] worker.cc(30,105)
  -> INLINE: (55,16) RelativeNormOfDifference(int, const double *, const double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.cc(35,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at worker.cc(35,7)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at worker.cc(35,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at worker.cc(49,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at worker.cc(40,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at worker.cc(43,7)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at worker.cc(43,7)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at worker.cc(43,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at worker.cc(49,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at worker.cc(49,5)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at worker.cc(49,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at worker.cc(50,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at worker.cc(52,7)
         remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ worker.cc(53,2) ]
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at worker.cc(52,7)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at worker.cc(52,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at worker.cc(22,3) inlined into worker.cc(55,16)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at worker.cc(22,3) inlined into worker.cc(55,16)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

worker.cc(30,105):remark #34051: REGISTER ALLOCATION : [_Z15IterativeSolveriPKdS0_Pdd] worker.cc:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     207
            Global    :      88
            Local     :     119
        Regenerable   :      11
        Spilled       :      14
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      28 [2.36e+02 ~ 1.8%]
            Writes    :      20 [5.52e+01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
