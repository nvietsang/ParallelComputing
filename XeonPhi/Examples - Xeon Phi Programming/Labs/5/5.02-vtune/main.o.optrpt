Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] main.cc(34,33)
  -> INLINE: (50,3) InitializeMatrix(int, double *)


    Report from: OpenMP optimizations [openmp]

main.cc(68:1-68:1):OMP:main:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at main.cc(23,3) inlined into main.cc(50,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cc(25,5) inlined into main.cc(50,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 7
   LOOP END
LOOP END

LOOP BEGIN at main.cc(54,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at main.cc(56,25)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at main.cc(66,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at main.cc(68,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

main.cc(34,33):remark #34051: REGISTER ALLOCATION : [main] main.cc:34

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     303
            Global    :      77
            Local     :     226
        Regenerable   :     122
        Spilled       :       9
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :      14 [7.40e+00 ~ 0.0%]
            Writes    :      11 [4.44e+01 ~ 0.0%]
        Spills        :     120 bytes*
            Reads     :      22 [2.11e+02 ~ 0.0%]
            Writes    :      21 [1.22e+02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: InitializeMatrix(int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (InitializeMatrix(int, double *)) [2] main.cc(21,47)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at main.cc(23,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at main.cc(25,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at main.cc(25,5)
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
   LOOP END

   LOOP BEGIN at main.cc(25,5)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at main.cc(25,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

main.cc(21,47):remark #34051: REGISTER ALLOCATION : [_Z16InitializeMatrixiPd] main.cc:21

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r12 r14-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :     113
            Global    :      37
            Local     :      76
        Regenerable   :       7
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.2%]
            Writes    :       4 [3.60e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
