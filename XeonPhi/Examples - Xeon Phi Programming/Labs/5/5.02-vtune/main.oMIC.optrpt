Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] main.cc(34,33)
  -> INLINE: (50,3) InitializeMatrix(int, double *)


    Report from: OpenMP optimizations [openmp]

main.cc(68:1-68:1):OMP:main:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at main.cc(23,3) inlined into main.cc(50,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25018: Total number of lines prefetched=2

   LOOP BEGIN at main.cc(25,5) inlined into main.cc(50,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 7
      remark #25018: Total number of lines prefetched=16
   LOOP END
LOOP END

LOOP BEGIN at main.cc(54,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #25018: Total number of lines prefetched=2
LOOP END

LOOP BEGIN at main.cc(56,25)
   remark #15300: LOOP WAS VECTORIZED
   remark #25018: Total number of lines prefetched=2
LOOP END

LOOP BEGIN at main.cc(66,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at main.cc(68,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #25018: Total number of lines prefetched=2
LOOP END

    Report from: Code generation optimizations [cg]

main.cc(34,33):remark #34051: REGISTER ALLOCATION : [main] main.cc:34

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   53[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1-k7]
        
    Routine temporaries
        Total         :     446
            Global    :      91
            Local     :     355
        Regenerable   :     127
        Spilled       :       9
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :      15 [1.19e+01 ~ 0.0%]
            Writes    :      12 [4.89e+01 ~ 0.0%]
        Spills        :     224 bytes*
            Reads     :      24 [1.58e+02 ~ 0.0%]
            Writes    :      21 [1.14e+02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: InitializeMatrix(int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (InitializeMatrix(int, double *)) [2] main.cc(21,47)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at main.cc(23,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25018: Total number of lines prefetched=4

   LOOP BEGIN at main.cc(25,5)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at main.cc(25,5)
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
      remark #25018: Total number of lines prefetched=8
   LOOP END

   LOOP BEGIN at main.cc(25,5)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

main.cc(21,47):remark #34051: REGISTER ALLOCATION : [_Z16InitializeMatrixiPd] main.cc:21

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r12 r14-r15 zmm0-zmm13 k1-k3]
        
    Routine temporaries
        Total         :      98
            Global    :      43
            Local     :      55
        Regenerable   :       7
        Spilled       :       4
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       6 [1.35e+01 ~ 0.8%]
            Writes    :       6 [1.35e+01 ~ 0.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
